expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, num_bootstraps = 100, alpha = 0.05)
#Load the package
#library(devtools)
#install_github("AU-R-Programming/FinalProject13")
# Load the necessary functions from your package
library(FinalProject13)
# Load dataset from extdata folder
data_path <- system.file("extdata", "expenses.csv", package = "FinalProject13")
expenses <- read.csv(data_path)
median_charges <- 9382
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, num_bootstraps = 1000, alpha = 0.05)
library(devtools)
install_github("AU-R-Programming/FinalProject13")
#Load the package
#library(devtools)
#install_github("AU-R-Programming/FinalProject13")
# Load the necessary functions from your package
library(FinalProject13)
# Load dataset from extdata folder
data_path <- system.file("extdata", "expenses.csv", package = "FinalProject13")
expenses <- read.csv(data_path)
median_charges <- 9382
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Calculate confusion metrics using a cutoff of 0.5 (common threshold for binary classification)
metrics <- confusion_metrics(y, y_pred, cutoff = 0.5)
# Print confusion matrix and evaluation metrics
cat("\nConfusion Matrix:\n")
print(metrics$confusion_matrix)
cat("\nModel Performance Metrics:\n")
cat("Prevalence: ", metrics$prevalence, "\n")
cat("Accuracy: ", metrics$accuracy, "\n")
cat("Sensitivity: ", metrics$sensitivity, "\n")
cat("Specificity: ", metrics$specificity, "\n")
cat("False Discovery Rate (FDR): ", metrics$fdr, "\n")
cat("Diagnostic Odds Ratio (DOR): ", metrics$dor, "\n")
#Bootstrap
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, num_bootstraps = 1000, alpha = 0.05)
cor(expenses$years_older_than_min, expenses$bmi_greater_than_min)
cor(expenses$years_older_than_min, expenses$bmi_greater_than_min)
summary(expenses$years_older_than_min)
summary(expenses$bmi_greater_than_min)
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
apply(X, 2, var)
#TESTS
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
table(expenses$charges_above_median)
#Load the package
#library(devtools)
#install_github("AU-R-Programming/FinalProject13")
# Load the necessary functions from your package
library(FinalProject13)
# Load dataset from extdata folder
data_path <- system.file("extdata", "expenses.csv", package = "FinalProject13")
expenses <- read.csv(data_path)
median_charges <- 9382
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
expenses$years_older_than_min <- scale(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- scale(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Calculate confusion metrics using a cutoff of 0.5 (common threshold for binary classification)
metrics <- confusion_metrics(y, y_pred, cutoff = 0.5)
# Print confusion matrix and evaluation metrics
cat("\nConfusion Matrix:\n")
print(metrics$confusion_matrix)
cat("\nModel Performance Metrics:\n")
cat("Prevalence: ", metrics$prevalence, "\n")
cat("Accuracy: ", metrics$accuracy, "\n")
cat("Sensitivity: ", metrics$sensitivity, "\n")
cat("Specificity: ", metrics$specificity, "\n")
cat("False Discovery Rate (FDR): ", metrics$fdr, "\n")
cat("Diagnostic Odds Ratio (DOR): ", metrics$dor, "\n")
#Bootstrap
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, num_bootstraps = 1000, alpha = 0.05)
#TESTS
# Create the predictor matrix (bmi and children columns) as a numeric matrix
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Compute determinant
det_X <- det(X)
#TESTS
# Create the predictor matrix (bmi and children columns) as a numeric matrix
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Compute determinant
det_X <- det(X)
#TESTS
# Create the predictor matrix (bmi and children columns) as a numeric matrix
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Compute determinant
det_X <- det(X)
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
#TESTS
# Create the predictor matrix (bmi and children columns) as a numeric matrix
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Compute determinant
det_X <- det(X)
#TESTS
# Create the predictor matrix (bmi and children columns) as a numeric matrix
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Check rank
rank_X <- qr(X)$rank
cat("Rank of X:", rank_X, "\n")
if (rank_X < ncol(X)) {
cat("Matrix is singular (rank less than number of columns).\n")
} else {
cat("Matrix is not singular.\n")
}
# Check singular values
svd_X <- svd(X)
cat("Smallest singular value:", min(svd_X$d), "\n")
if (min(svd_X$d) < 1e-10) {
cat("Matrix is nearly singular (smallest singular value close to zero).\n")
} else {
cat("Matrix is not singular.\n")
}
#TESTS
# Create the predictor matrix (bmi and children columns) as a numeric matrix
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
cor(X)
#Load the package
#library(devtools)
#install_github("AU-R-Programming/FinalProject13")
# Load the necessary functions from your package
library(FinalProject13)
# Load dataset from extdata folder
data_path <- system.file("extdata", "expenses.csv", package = "FinalProject13")
expenses <- read.csv(data_path)
median_charges <- 9382
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Calculate confusion metrics using a cutoff of 0.5 (common threshold for binary classification)
metrics <- confusion_metrics(y, y_pred, cutoff = 0.5)
# Print confusion matrix and evaluation metrics
cat("\nConfusion Matrix:\n")
print(metrics$confusion_matrix)
cat("\nModel Performance Metrics:\n")
cat("Prevalence: ", metrics$prevalence, "\n")
cat("Accuracy: ", metrics$accuracy, "\n")
cat("Sensitivity: ", metrics$sensitivity, "\n")
cat("Specificity: ", metrics$specificity, "\n")
cat("False Discovery Rate (FDR): ", metrics$fdr, "\n")
cat("Diagnostic Odds Ratio (DOR): ", metrics$dor, "\n")
#Bootstrap
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, num_bootstraps = 1000, alpha = 0.05)
#' @title Bootstrap Confidence Intervals for Beta Coefficients
#'
#' @description
#' Calculates the bootstrap confidence intervals for the estimated beta coefficients.
#'
#' @param X A matrix of predictor variables (features)
#' @param y A vector of binary response variables (0 or 1)
#' @param alpha The significance level (default is 0.05 for 95% confidence intervals)
#' @param num_bootstrap The number of bootstrap resamples (default is 20)
#'
#' @return A list containing:
#'   \item{lower_bound}{The lower bound of the confidence interval for each coefficient}
#'   \item{upper_bound}{The upper bound of the confidence interval for each coefficient}
#'
#' @examples
#' X <- matrix(rnorm(100 * 2), ncol = 2)
#' y <- rbinom(100, 1, 0.5)
#' ci <- bootstrap_ci(X, y, alpha = 0.05, num_bootstrap = 100)
#'
#' @export
bootstrap_ci <- function(X, y, alpha = 0.05, num_bootstrap = 20) {
# Function to estimate beta coefficients
estimate_beta <- function(X, y) {
X <- cbind(1, X)
starting_beta <- solve(t(X) %*% X) %*% t(X) %*% y
loss_function <- function(beta) {
p <- 1 / (1 + exp(-X %*% beta))
p <- pmax(pmin(p, 0.9999), 0.0001)
-sum(y * log(p) + (1 - y) * log(1 - p))
}
result <- optim(par = starting_beta, fn = loss_function)
return(result$par)
}
# Perform bootstrap resampling
bootstrap_coefs <- matrix(NA, nrow = num_bootstrap, ncol = ncol(X) + 1)
for (i in 1:num_bootstrap) {
# Resample indices
indices <- sample(1:length(y), length(y), replace = TRUE)
X_resample <- X[indices, ]
y_resample <- y[indices]
# Estimate beta on the bootstrap sample
bootstrap_coefs[i, ] <- estimate_beta(X_resample, y_resample)
}
# Calculate the confidence intervals
lower_bound <- apply(bootstrap_coefs, 2, function(coef) quantile(coef, alpha / 2))
upper_bound <- apply(bootstrap_coefs, 2, function(coef) quantile(coef, 1 - alpha / 2))
# Return the results
list(
lower_bound = lower_bound,
upper_bound = upper_bound
)
}
library(devtools)
install_github("AU-R-Programming/FinalProject13")
#Load the package
#library(devtools)
#install_github("AU-R-Programming/FinalProject13")
# Load the necessary functions from your package
library(FinalProject13)
# Load dataset from extdata folder
data_path <- system.file("extdata", "expenses.csv", package = "FinalProject13")
expenses <- read.csv(data_path)
median_charges <- 9382
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Calculate confusion metrics using a cutoff of 0.5 (common threshold for binary classification)
metrics <- confusion_metrics(y, y_pred, cutoff = 0.5)
# Print confusion matrix and evaluation metrics
cat("\nConfusion Matrix:\n")
print(metrics$confusion_matrix)
cat("\nModel Performance Metrics:\n")
cat("Prevalence: ", metrics$prevalence, "\n")
cat("Accuracy: ", metrics$accuracy, "\n")
cat("Sensitivity: ", metrics$sensitivity, "\n")
cat("Specificity: ", metrics$specificity, "\n")
cat("False Discovery Rate (FDR): ", metrics$fdr, "\n")
cat("Diagnostic Odds Ratio (DOR): ", metrics$dor, "\n")
#Bootstrap
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, alpha = 0.05, num_bootstraps = 1000)
#Load the package
#library(devtools)
#install_github("AU-R-Programming/FinalProject13")
# Load the necessary functions from your package
library(FinalProject13)
# Load dataset from extdata folder
data_path <- system.file("extdata", "expenses.csv", package = "FinalProject13")
expenses <- read.csv(data_path)
median_charges <- 9382
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Calculate confusion metrics using a cutoff of 0.5 (common threshold for binary classification)
metrics <- confusion_metrics(y, y_pred, cutoff = 0.5)
# Print confusion matrix and evaluation metrics
cat("\nConfusion Matrix:\n")
print(metrics$confusion_matrix)
cat("\nModel Performance Metrics:\n")
cat("Prevalence: ", metrics$prevalence, "\n")
cat("Accuracy: ", metrics$accuracy, "\n")
cat("Sensitivity: ", metrics$sensitivity, "\n")
cat("Specificity: ", metrics$specificity, "\n")
cat("False Discovery Rate (FDR): ", metrics$fdr, "\n")
cat("Diagnostic Odds Ratio (DOR): ", metrics$dor, "\n")
#Bootstrap
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, alpha = 0.05, num_bootstrap = 1000)
#Load the package
#library(devtools)
#install_github("AU-R-Programming/FinalProject13")
# Load the necessary functions from your package
library(FinalProject13)
# Load dataset from extdata folder
data_path <- system.file("extdata", "expenses.csv", package = "FinalProject13")
expenses <- read.csv(data_path)
median_charges <- 9382
# Create a new column indicating whether charges are greater than the median
expenses$charges_above_median <- ifelse(expenses$charges > median_charges, 1, 0)
# Create a new column for age in years older than 18
expenses$years_older_than_min <- expenses$age - 18
# Create a new column for bmi greater than min of 15.96
expenses$bmi_greater_than_min <- expenses$bmi - 15.96
# Ensure that both 'bmi' and 'children' columns are numeric
expenses$years_older_than_min <- as.numeric(expenses$years_older_than_min)
expenses$bmi_greater_than_min <- as.numeric(expenses$bmi_greater_than_min)
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Apply the estimate_beta function to estimate the beta coefficients
model <- estimate_beta(X, y)
# Print estimated coefficients
cat("Estimated coefficients for the logistic regression model:\n")
print(model$coefficients)
# Make predictions on the same data (for testing)
y_pred <- predict_prob(X, model$coefficients)
# Calculate confusion metrics using a cutoff of 0.5 (common threshold for binary classification)
metrics <- confusion_metrics(y, y_pred, cutoff = 0.5)
# Print confusion matrix and evaluation metrics
cat("\nConfusion Matrix:\n")
print(metrics$confusion_matrix)
cat("\nModel Performance Metrics:\n")
cat("Prevalence: ", metrics$prevalence, "\n")
cat("Accuracy: ", metrics$accuracy, "\n")
cat("Sensitivity: ", metrics$sensitivity, "\n")
cat("Specificity: ", metrics$specificity, "\n")
cat("False Discovery Rate (FDR): ", metrics$fdr, "\n")
cat("Diagnostic Odds Ratio (DOR): ", metrics$dor, "\n")
#Bootstrap
# Select the columns we are interested in
# Create the predictor matrix (bmi and children columns) as a numeric matrix
X <- as.matrix(expenses[, c("years_older_than_min", "bmi_greater_than_min")])
# Response vector (smoker column)
y <- expenses$charges_above_median
# Perform bootstrap to calculate confidence intervals for the beta coefficients
bootstrap_result <- bootstrap_ci(X, y, alpha = 0.05, num_bootstrap = 20)
# Display the confidence intervals
print(bootstrap_result)
